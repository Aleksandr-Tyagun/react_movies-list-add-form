{"version":3,"sources":["components/MovieCard/MovieCard.js","components/MoviesList/MoviesList.js","components/NewMovie/NewMovie.js","App.js","index.js"],"names":["MovieCard","title","description","imgUrl","imdbUrl","className","src","alt","href","defaultProps","MoviesList","movies","map","movie","key","imdbId","initState","titleErrorMsg","descriptionErrorMsg","imgUrlErrorMsg","imdbUrlErrorMsg","imdbIdErrorMsg","validationStatus","urlValidation","RegExp","NewMovie","state","validateForm","setState","handleSubmit","e","preventDefault","addMovie","props","handleInputTitle","target","value","validateTitle","trim","length","handleInputDescription","handleInputImgUrl","test","handleInputImdbUrl","handleInputImdbId","validateInputImdbId","this","onSubmit","classNames","type","onChange","onBlur","placeholder","style","resize","rows","disabled","Component","App","moviesFromServer","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.a131615c.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport './MovieCard.scss';\n\nexport const MovieCard = ({ title, description, imgUrl, imdbUrl }) => (\n  <div className=\"card\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          src={imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\">{title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\">\n        {description}\n        <br />\n        <a href={imdbUrl}>IMDB</a>\n      </div>\n    </div>\n  </div>\n);\n\nMovieCard.propTypes = {\n  title: PropTypes.string.isRequired,\n  description: PropTypes.string,\n  imgUrl: PropTypes.string.isRequired,\n  imdbUrl: PropTypes.string.isRequired,\n};\n\nMovieCard.defaultProps = {\n  description: '',\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\n\nexport const MoviesList = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard key={movie.imdbId} {...movie} />\n    ))}\n  </div>\n);\n\nMoviesList.propTypes = {\n  movies: PropTypes.arrayOf(\n    PropTypes.shape({\n      title: PropTypes.string.isRequired,\n      description: PropTypes.string,\n      imgUrl: PropTypes.string.isRequired,\n      imdbUrl: PropTypes.string.isRequired,\n    }),\n  ),\n};\n\nMoviesList.defaultProps = {\n  movies: [],\n};\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport './NewMovie.scss';\n\nconst initState = {\n  title: '',\n  description: '',\n  imgUrl: '',\n  imdbUrl: '',\n  imdbId: '',\n  titleErrorMsg: '',\n  descriptionErrorMsg: '',\n  imgUrlErrorMsg: '',\n  imdbUrlErrorMsg: '',\n  imdbIdErrorMsg: '',\n  validationStatus: false,\n};\n// eslint-disable-next-line max-len\nconst urlValidation = new RegExp(/^((([A-Za-z]{3,9}:(?:\\/\\/)?)(?:[-;:&=+$,\\w]+@)?[A-Za-z0-9.-]+|(?:www\\.|[-;:&=+$,\\w]+@)[A-Za-z0-9.-]+)((?:\\/[+~%/.\\w-_]*)?\\??(?:[-+=&;%@.\\w_]*)#?(?:[.!/\\\\\\w]*))?)$/);\n\nexport class NewMovie extends Component {\n  state = initState;\n\n  validateForm = () => {\n    this.setState((state) => {\n      const {\n        title,\n        imgUrl,\n        imdbUrl,\n        imdbId,\n        titleErrorMsg,\n        imgUrlErrorMsg,\n        imdbUrlErrorMsg,\n        imdbIdErrorMsg,\n      } = state;\n\n      if (!title\n        || !imgUrl\n        || !imdbUrl\n        || !imdbId\n        || !!titleErrorMsg\n        || !!imgUrlErrorMsg\n        || !!imdbUrlErrorMsg\n        || !!imdbIdErrorMsg\n      ) {\n        return { validationStatus: false };\n      }\n\n      return { validationStatus: true };\n    });\n  }\n\n  handleSubmit = (e) => {\n    e.preventDefault();\n    const { addMovie } = this.props;\n    const {\n      title,\n      description,\n      imgUrl,\n      imdbUrl,\n      imdbId,\n      validationStatus,\n    } = this.state;\n\n    if (validationStatus) {\n      addMovie({\n        title,\n        description,\n        imgUrl,\n        imdbUrl,\n        imdbId,\n      });\n\n      this.setState(initState);\n    }\n  }\n\n  handleInputTitle = (e) => {\n    const title = e.target.value;\n\n    this.setState({ title });\n    this.validateForm();\n  }\n\n  validateTitle = (e) => {\n    let title = e.target.value;\n\n    if (title.trim().length === 0) {\n      title = '';\n    }\n\n    this.setState({\n      title,\n      titleErrorMsg: !title\n        ? 'This field is required'\n        : '',\n    });\n\n    this.validateForm();\n  }\n\n  handleInputDescription = (e) => {\n    const description = e.target.value;\n\n    this.setState({\n      description,\n      descriptionErrorMsg: '',\n    });\n\n    this.validateForm();\n  }\n\n  handleInputImgUrl = (e) => {\n    const imgUrl = e.target.value;\n\n    this.setState({\n      imgUrl,\n      imgUrlErrorMsg: !urlValidation.test(imgUrl)\n        ? 'This field should be a valid URL'\n        : '',\n    });\n\n    this.validateForm();\n  }\n\n  handleInputImdbUrl = (e) => {\n    const imdbUrl = e.target.value;\n\n    this.setState({\n      imdbUrl,\n      imdbUrlErrorMsg: !urlValidation.test(imdbUrl)\n        ? 'This field should be a valid URL'\n        : '',\n    });\n\n    this.validateForm();\n  }\n\n  handleInputImdbId = (e) => {\n    const imdbId = e.target.value;\n\n    this.setState({ imdbId });\n    this.validateForm();\n  }\n\n  validateInputImdbId = (e) => {\n    let imdbId = e.target.value;\n\n    if (imdbId.trim().length === 0) {\n      imdbId = '';\n    }\n\n    this.setState({\n      imdbId,\n      imdbIdErrorMsg: !imdbId\n        ? 'This field is required'\n        : '',\n    });\n\n    this.validateForm();\n  }\n\n  render() {\n    const {\n      title,\n      description,\n      imgUrl,\n      imdbUrl,\n      imdbId,\n      titleErrorMsg,\n      descriptionErrorMsg,\n      imgUrlErrorMsg,\n      imdbUrlErrorMsg,\n      imdbIdErrorMsg,\n      validationStatus,\n    } = this.state;\n\n    return (\n      <form\n        className=\"new-movie\"\n        onSubmit={this.handleSubmit}\n      >\n        <label className=\"new-movie__label\">\n          title:\n          <input\n            className={\n              classNames(\n                'new-movie__input',\n                { 'new-movie__input--error': titleErrorMsg },\n              )\n            }\n            type=\"text\"\n            value={title}\n            onChange={this.handleInputTitle}\n            onBlur={this.validateTitle}\n            placeholder=\"Movie name\"\n          />\n          {titleErrorMsg && (\n            <span className=\"new-movie__error\">\n              {titleErrorMsg}\n            </span>\n          )}\n        </label>\n        <label className=\"new-movie__label\">\n          description:\n          <textarea\n            className=\"new-movie__input\"\n            style={{ resize: 'none' }}\n            type=\"text\"\n            value={description}\n            onChange={this.handleInputDescription}\n            onBlur={this.handleInputDescription}\n            rows=\"6\"\n            placeholder=\"Movie description\"\n          />\n          <span className=\"new-movie__error\">\n            {descriptionErrorMsg}\n          </span>\n        </label>\n        <label className=\"new-movie__label\">\n          imgUrl:\n          <input\n            className={\n              classNames(\n                'new-movie__input',\n                { 'new-movie__input--error': imgUrlErrorMsg },\n              )\n            }\n            type=\"text\"\n            value={imgUrl}\n            onChange={this.handleInputImgUrl}\n            onBlur={this.handleInputImgUrl}\n            placeholder=\"https://www.example.com\"\n          />\n          {imgUrlErrorMsg && (\n            <span className=\"new-movie__error\">\n              {imgUrlErrorMsg}\n            </span>\n          )}\n        </label>\n        <label className=\"new-movie__label\">\n          imdbUrl:\n          <input\n            className={\n              classNames(\n                'new-movie__input',\n                { 'new-movie__input--error': imdbUrlErrorMsg },\n              )\n            }\n            type=\"text\"\n            value={imdbUrl}\n            onChange={this.handleInputImdbUrl}\n            onBlur={this.handleInputImdbUrl}\n            placeholder=\"https://www.example.com\"\n          />\n          {imdbUrlErrorMsg && (\n            <span className=\"new-movie__error\">\n              {imdbUrlErrorMsg}\n            </span>\n          )}\n        </label>\n        <label className=\"new-movie__label\">\n          imdbId:\n          <input\n            className={\n              classNames('new-movie__input', {\n                'new-movie__input--error': imdbIdErrorMsg,\n              })\n            }\n            type=\"text\"\n            value={imdbId}\n            onChange={this.handleInputImdbId}\n            onBlur={this.validateInputImdbId}\n            placeholder=\"Movie imdb id\"\n          />\n          {imdbIdErrorMsg && (\n            <span className=\"new-movie__error\">\n              {imdbIdErrorMsg}\n            </span>\n          )}\n        </label>\n\n        <button\n          className={\n            classNames(\n              'new-movie__button',\n              { 'new-movie__button--disabled': !validationStatus },\n            )\n          }\n          type=\"submit\"\n          disabled={!validationStatus}\n        >\n          Add new movie\n        </button>\n      </form>\n    );\n  }\n}\n\nNewMovie.propTypes = {\n  addMovie: PropTypes.func.isRequired,\n};\n","import React, { Component } from 'react';\nimport './App.scss';\nimport { MoviesList } from './components/MoviesList';\nimport { NewMovie } from './components/NewMovie';\nimport moviesFromServer from './api/movies.json';\n\nexport class App extends Component {\n  state = {\n    movies: moviesFromServer,\n  };\n\n  addMovie = (movie) => {\n    this.setState(state => ({\n      movies: [...state.movies, movie],\n    }));\n  };\n\n  render() {\n    const { movies } = this.state;\n\n    return (\n      <div className=\"page\">\n        <div className=\"page-content\">\n          <MoviesList movies={movies} />\n        </div>\n        <div className=\"sidebar\">\n          <NewMovie addMovie={this.addMovie} />\n        </div>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}